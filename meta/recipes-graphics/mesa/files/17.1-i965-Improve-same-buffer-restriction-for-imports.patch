From 23172161eeecdcb235f55c6ded7c8f9eb9acf0b3 Mon Sep 17 00:00:00 2001
From: Daniel Stone <daniels@collabora.com>
Date: Tue, 20 Jun 2017 16:33:51 -0700
Subject: [PATCH] i965: Improve same-buffer restriction for imports

Intel hardware requires that all planes of an image come from the same
buffer, which is currently implemented by testing that all FDs are
numerically the same.

However, when going through a winsys (e.g.) or anything which transits
FDs individually, the FDs may be different even if the underlying buffer
is the same.

Instead of checking the FDs for equality, we must check if they actually
point to the same buffer (Jason).

Change-Id: I917d8e6ec4765e39aef52cfab43bb81cff735e88
Reviewed-by: Varad Gautam <varad.gautam@collabora.com>
Reviewed-by: Jason Ekstrand <jason@jlekstrand.net>
---
 src/mesa/drivers/dri/i965/intel_screen.c | 19 ++++++++++++++-----
 1 file changed, 14 insertions(+), 5 deletions(-)

diff --git a/src/mesa/drivers/dri/i965/intel_screen.c b/src/mesa/drivers/dri/i965/intel_screen.c
index 5f80000..0a7969b 100644
--- a/src/mesa/drivers/dri/i965/intel_screen.c
+++ b/src/mesa/drivers/dri/i965/intel_screen.c
@@ -718,11 +718,6 @@ intel_create_image_from_fds(__DRIscreen *dri_screen,
    if (fds == NULL || num_fds < 1)
       return NULL;
 
-   /* We only support all planes from the same bo */
-   for (i = 0; i < num_fds; i++)
-      if (fds[0] != fds[i])
-         return NULL;
-
    f = intel_image_format_lookup(fourcc);
    if (f == NULL)
       return NULL;
@@ -759,6 +754,20 @@ intel_create_image_from_fds(__DRIscreen *dri_screen,
       return NULL;
    }
 
+   /* We only support all planes from the same bo.
+    * brw_bo_gem_create_from_prime() should return the same pointer for all
+    * fds received here */
+   for (i = 1; i < num_fds; i++) {
+      struct brw_bo *aux = drm_intel_bo_gem_create_from_prime(screen->bufmgr,
+                                                              fds[i], size);
+      drm_intel_bo_unreference(aux);
+      if (aux != image->bo) {
+         drm_intel_bo_unreference(image->bo);
+         free(image);
+         return NULL;
+      }
+   }
+
    if (f->nplanes == 1) {
       image->offset = image->offsets[0];
       intel_image_warn_if_unaligned(image, __func__);
-- 
2.7.4

